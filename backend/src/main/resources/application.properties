spring.application.name=backend

# ---------------------------------
# POSTGRESQL DATABASE CONNECTION
# ---------------------------------
# Read values from environment variables
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# ---------------------------------
# JPA & HIBERNATE SETTINGS
# ---------------------------------
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# ---------------------------------
# OAUTH2 RESOURCE SERVER SETTINGS
# ---------------------------------
# This can also be an env variable if you want
# spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI}


# ---------------------------------
# HIKARI CONNECTION POOL SETTINGS
# ---------------------------------
# We are limiting the pool to 3 connections (default is 10)
# This will prevent connection storms from crashing your Aiven DB.
spring.datasource.hikari.maximum-pool-size=1
spring.datasource.hikari.minimum-idle=0
spring.jpa.open-in-view=false
# This will make Hikari print its own configuration on startup
logging.level.com.zaxxer.hikari=DEBUG


# ---------------------------------
# JWT TOKEN SETTINGS
# ---------------------------------
application.security.jwt.secret-key=${JWT_SCRET_KEY}
application.security.jwt.expiration=3600000
application.security.jwt.refresh-token.expiration=604800000

# ---------------------------------
# COOKIE SETTINGS
# ---------------------------------
# Your custom root domain (e.g., yourdomain.com) - add the leading dot!
application.security.cookie.domain=
# Set to true in production (when using HTTPS), false for local HTTP testing if needed
application.security.cookie.secure=true
# SameSite attribute (None usually needed for cross-subdomain)
application.security.cookie.same-site=None


# ---------------------------------
# CORS SETTINGS
# ---------------------------------
# Your frontend app's full URL (including https://)
application.cors.allowed-origins=${CORS_ALLOWED_ORIGINS}
# Enable DEBUG logging specifically for Spring Security components


logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer=ERROR


admin.email=${ADMIN_EMAIL:admin@optimizer.com}
admin.password=${ADMIN_PASSWORD:admin123}
admin.name=${ADMIN_NAME:Admin User}


# ---------------------------------
# GOOGLE OAUTH2 CLIENT SETTINGS
# ---------------------------------
# Your Google Client ID
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}

# Your Google Client Secret
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

# Scopes to request from Google (openid, profile, and email are standard)
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# ---------------------------------
# CUSTOM REDIRECT URL
# ---------------------------------
# The URL for your frontend app where Spring Boot will redirect after a successful login
# (This is used by your custom OAuth2LoginSuccessHandler)
application.security.oauth2.frontend-redirect-url=${OAUTH_FRONTEND_REDIRECT_URL}


# ==========================
# Gmail SMTP Configuration
# ==========================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=optimizerwv1@gmail.com
spring.mail.password=shfyckocfzlwhmgn

# Enable authentication and TLS
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Optional timeouts (helps prevent hangs)
spring.mail.properties.mail.smtp.connectiontimeout=10000
spring.mail.properties.mail.smtp.timeout=10000
spring.mail.properties.mail.smtp.writetimeout=10000

# Logging (optional)
logging.level.org.springframework.mail=DEBUG
